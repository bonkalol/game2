@function calcProcent($value, $defaultValue) {
	@return ($value / $defaultValue) * 100%;
}


// convert pixels to rem
@function px2rem($px, $base-font-size: $rootFontSize) {
	@if unitless($px) {
		@warn 'Assuming #{$px} to be in pixels, attempting to convert it into pixels.';
		@return px2rem($px + 0px);
	} @else if unit($px) == rem {
		@return $px;
	}

	@return ($px / $base-font-size) * 1rem;
}

// convert to em
@function px2em($px, $base-font-size: $rootFontSize) {
	@if unitless($px) {
		@warn 'Assuming #{$px} to be in pixels, attempting to convert it into pixels.';
		@return px2em($px + 0px);
	} @else if unit($px) == em {
		@return $px;
	}

	@return ($px / $base-font-size) * 1em;
}

@function decimal-round ($number, $digits: 0, $mode: round) {
    $n: 1;
    // $number must be a number
    @if type-of($number) != number {
        @warn '#{ $number } is not a number.';
        @return $number;
    }
    // $digits must be a unitless number
    @if type-of($digits) != number {
        @warn '#{ $digits } is not a number.';
        @return $number;
    } @else if not unitless($digits) {
        @warn '#{ $digits } has a unit.';
        @return $number;
    }
    @if $digits > 0 {
        @for $i from 1 through $digits {
            $n: $n * 10;
        }
    }
    @if $mode == round {
        @return round($number * $n) / $n;
    } @else if $mode == ceil {
        @return ceil($number * $n) / $n;
    } @else if $mode == floor {
        @return floor($number * $n) / $n;
    } @else {
        @warn '#{ $mode } is undefined keyword.';
        @return $number;
    }
}